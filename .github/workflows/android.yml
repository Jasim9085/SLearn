name: Android CI Build From Source

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks out your repository source code.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      # Step 2: Set up the Java Development Kit (JDK).
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Install NDK
        run: |
          yes | sdkmanager --install "ndk;26.1.10909125"

      # Step 3: REMOVED setup-ndk step. Gradle will now manage the NDK entirely.

      # Step 4: OVERWRITE ALL GRADLE FILES with the final, correct configuration.
      - name: Create/Overwrite All Gradle Build Files
        run: |
          # Create root settings.gradle
          echo "pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }" > settings.gradle
          echo "dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }" >> settings.gradle
          echo "rootProject.name = 'SLearn'" >> settings.gradle
          echo "include ':app'" >> settings.gradle

          # Create root build.gradle
          echo "plugins { id 'com.android.application' version '8.2.0' apply false }" > build.gradle

          # CRITICAL: Overwrite the app/build.gradle with a version that
          # FORCES Gradle to download and use the correct NDK version (r26+).
          cat << 'EOF' > app/build.gradle
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.slearn'
              compileSdk 34

              // CRITICAL FIX: This line tells Gradle to use NDK r26, which contains glslc.
              ndkVersion "26.1.10909125"

              defaultConfig {
                  applicationId "com.slearn"
                  minSdk 24
                  targetSdk 34
                  versionCode 1
                  versionName "1.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  
                  externalNativeBuild {
                      cmake {
                          cppFlags '-std=c++17', '-frtti', '-fexceptions'
                      }
                  }
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              externalNativeBuild {
                  cmake {
                      path 'src/main/cpp/engine/CMakeLists.txt'
                      version '3.22.1'
                  }
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }
          EOF

      # Step 5: Install a specific version of Gradle to create the wrapper.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.7'

      # Step 6: Generate the Gradle Wrapper scripts (gradlew).
      - name: Generate Gradle Wrapper
        run: gradle wrapper

      # Step 7: Grant execute permission to the now-existing Gradle wrapper.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 8: Build the application using the generated wrapper.
      # Gradle will now automatically download NDK r26 and CMake will find glslc.
      - name: Build with Gradle Wrapper
        run: ./gradlew :app:assembleDebug

      # Step 9: Upload the final build artifact.
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk