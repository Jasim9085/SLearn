# Name of your workflow
name: Android CI Build with Native Engine

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks-out your repository.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Step 2: Set up the Java Development Kit (JDK).
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Set up the Android NDK. This is essential.
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true # This sets the ANDROID_NDK_HOME env variable

      # Step 4 (CORRECTED): Add the NDK's glslc compiler to the system PATH.
      # We no longer use an external action. We find the compiler inside the NDK.
      - name: Add NDK glslc to PATH
        run: echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # Step 5: Install a specific version of Gradle.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.7'

      # Step 6: Grant execute permission to the Gradle wrapper.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 7: Compile the app, including the C++ engine.
      # CMake will now find 'glslc' because we added its directory to the PATH.
      - name: Build with Gradle
        run: ./gradlew :app:assembleDebug

      # Step 8: Upload the build artifact (the final APK).
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
